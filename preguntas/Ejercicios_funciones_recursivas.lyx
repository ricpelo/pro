#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 66
InsetLayout Flex:Código
        LyxType               custom
        LabelString           codigo
        LatexType             command
        LatexName             codigo
        Decoration            classic
        Font
                Family        Typewriter
                Color         blue
        EndFont
        Preamble
                \usepackage{xcolor}
                \newcommand*{\codigo}[1]{\textcolor{blue}{\texttt{#1}}}
        EndPreamble
        ResetsFont            true
End
\end_local_layout
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "libertine" "default"
\font_sans "biolinum" "default"
\font_typewriter "beramono" "default"
\font_math "libertine-ntxm" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 80 100
\use_microtype true
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 4cm
\rightmargin 3cm
\headheight 2cm
\headsep 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Ejercicios de funciones recursivas
\end_layout

\begin_layout Subtitle
Programación — DAW
\end_layout

\begin_layout Author
Ricardo Pérez López
\begin_inset Newline newline
\end_inset

IES Doñana
\end_layout

\begin_layout Enumerate
Dada la siguiente función matemática:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
f(n)=\begin{cases}
0 & \textrm{si }n=0\\
1+2\cdot f(n-1) & \textrm{si }n>0
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
calcular el valor de 
\begin_inset Formula $f(3)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
La función 
\family typewriter
potencia
\family default
 tiene la siguiente especificación:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
\left\{ \begin{array}{l}
\textbf{Pre}:b\geq0\\
\texttt{potencia(}a\texttt{: int, }b\texttt{: int) -> int}\\
\textbf{Post}:\texttt{potencia(}a\texttt{, }b\texttt{)}=a^{b}
\end{array}\right.
\]

\end_inset


\end_layout

\begin_layout Enumerate
Implementar la función de forma no recursiva.
\end_layout

\begin_layout Enumerate
Implementar la función de forma recursiva.
\end_layout

\end_deeper
\begin_layout Enumerate
La función 
\family typewriter
repite
\family default
 tiene la siguiente especificación:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
\left\{ \begin{array}{l}
\textbf{Pre}:n\geq0\\
\texttt{repite(}s\texttt{: str, }n\texttt{: int) -> str}\\
\textbf{Post}:\texttt{repite(}s\texttt{, }n\texttt{)}=s\texttt{ * }n
\end{array}\right.
\]

\end_inset


\end_layout

\begin_layout Standard
Implementar la función de forma recursiva.
\end_layout

\end_deeper
\begin_layout Enumerate
La suma lenta es un algoritmo para sumar dos números para el que sólo necesitamo
s saber cuáles son el anterior y el siguiente de un número dado.
 El algoritmo se basa en la siguiente recurrencia:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula 
\[
suma\_lenta(a,b)=\begin{cases}
b & \textrm{si }a=0\\
suma\_lenta(ant(a),sig(b)) & \textrm{si }a>0
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Suponiendo que tenemos las siguientes funciones 
\family typewriter
ant
\family default
 y 
\family typewriter
sig
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

ant = lambda n: n - 1
\end_layout

\begin_layout Plain Layout

sig = lambda n: n + 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se pide:
\end_layout

\begin_layout Enumerate
Escribir su especificación.
\end_layout

\begin_layout Enumerate
Implementar una función recursiva que satisfaga dicha especificación.
\end_layout

\end_deeper
\begin_layout Enumerate
La función 
\family typewriter
suma_digitos
\family default
 calcula la suma de los dígitos de un número entero:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

suma_digitos(423) = 4 + 2 + 3 = 9
\end_layout

\begin_layout Plain Layout

suma_digitos(7) = 0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se pide:
\end_layout

\begin_layout Enumerate
Escribir su especificación.
\end_layout

\begin_layout Enumerate
Implementar una función recursiva que satisfaga dicha especificación.
\end_layout

\begin_layout Standard

\emph on
Indicación
\emph default
: Recordar que 
\family typewriter
\emph on
n
\emph default
 // 10
\family default
 le quita el último dígito a 
\begin_inset Formula $n$
\end_inset

.
 Además, 
\family typewriter
\emph on
n
\emph default
 
\begin_inset space ~
\end_inset

% 10
\family default
 devuelve el último dígito de 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
La función 
\family typewriter
voltea
\family default
 le da la vuelta a un número entero:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

voltea(423) = 324
\end_layout

\begin_layout Plain Layout

voltea(7) = 7
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se pide:
\end_layout

\begin_layout Enumerate
Escribir su especificación.
\end_layout

\begin_layout Enumerate
Implementar una función recursiva que satisfaga dicha especificación.
\end_layout

\begin_layout Standard

\emph on
Indicación
\emph default
: Usar la función 
\family typewriter
digitos
\family default
 que devuelve la cantidad de dígitos que tiene un entero.
 Usar además la indicación del ejercicio anterior.
\end_layout

\end_deeper
\begin_layout Enumerate
La función 
\family typewriter
par_positivo
\family default
 determina si un número entero positivo es par:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

par_positivo(0) = True
\end_layout

\begin_layout Plain Layout

par_positivo(1) = False
\end_layout

\begin_layout Plain Layout

par_positivo(27) = False
\end_layout

\begin_layout Plain Layout

par_positivo(82) = True
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se pide:
\end_layout

\begin_layout Enumerate
Escribir su especificación.
\end_layout

\begin_layout Enumerate
Implementar una función recursiva que satisfaga dicha especificación.
\end_layout

\end_deeper
\begin_layout Enumerate
La función 
\family typewriter
par
\family default
 determina si un número entero (positivo o negativo) es par:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

par(0) = True
\end_layout

\begin_layout Plain Layout

par(1) = False
\end_layout

\begin_layout Plain Layout

par(-27) = False
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se pide:
\end_layout

\begin_layout Enumerate
Escribir su especificación.
\end_layout

\begin_layout Enumerate
Implementar una función recursiva que satisfaga dicha especificación.
\end_layout

\begin_layout Enumerate
¿Cómo se podría implementar una función 
\family typewriter
impar
\family default
 a partir de la función 
\family typewriter
par
\family default
?
\end_layout

\end_deeper
\begin_layout Section*
Soluciones
\end_layout

\begin_layout Enumerate
\begin_inset Formula $f(3)=1+2\cdot f(2)=1+2\cdot(1+f(1))=1+2\cdot(1+2\cdot(1+2\cdot f(0)))=1+2\cdot(1+2\cdot(1+2\cdot0))=1+2\cdot(1+2\cdot1)=1+2\cdot3=7$
\end_inset

.
\end_layout

\begin_layout Enumerate
Soluciones:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

potencia = lambda a, b: a ** b
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

potencia = lambda a, b: 1 if b == 0 else a * potencia(a, b - 1)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

repite = lambda s, n: '' if n == 0 else s + repite(s, n - 1)
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Soluciones:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula 
\[
\left\{ \begin{array}{l}
\textbf{Pre}:a\geq0\\
\texttt{suma\_lenta(}a\texttt{: int, }b\texttt{: int) -> int}\\
\textbf{Post}:\texttt{suma\_lenta(}a\texttt{, }b\texttt{)}=a+b
\end{array}\right.
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

suma_lenta = lambda a, b: b if a == 0 else suma_lenta(ant(a), sig(b))
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Soluciones:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula 
\[
\left\{ \begin{array}{l}
\textbf{Pre}:n\geq0\\
\texttt{suma\_digitos(}n\texttt{: int) -> int}\\
\textbf{Post}:\texttt{suma\_digitos(}n\texttt{)}=\textrm{la suma de los dígitos de \emph{n}}
\end{array}\right.
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

suma_digitos = lambda n: n if n < 10 else (n % 10) + suma_digitos(n // 10)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Soluciones:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula 
\[
\left\{ \begin{array}{l}
\textbf{Pre}:n\geq0\\
\texttt{voltea(}n\texttt{: int) -> int}\\
\textbf{Post}:\texttt{voltea(}n\texttt{)}=\textrm{el número \emph{n} con los dígitos al revés}
\end{array}\right.
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

voltea = lambda n: n if n < 10 else 
\backslash

\end_layout

\begin_layout Plain Layout

                   (n % 10) * 10 ** (digitos(n) - 1) + voltea(n // 10)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Soluciones:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula 
\[
\left\{ \begin{array}{l}
\textbf{Pre}:n\geq0\\
\texttt{par\_positivo(}n\texttt{: int) -> bool}\\
\textbf{Post}:\texttt{par\_positivo(}n\texttt{)}=\begin{cases}
\texttt{True} & \textrm{si \emph{n} es par}\\
\texttt{False} & \textrm{en caso contrario}
\end{cases}
\end{array}\right.
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

par_positivo = lambda n: True if n == 0 else 
\backslash

\end_layout

\begin_layout Plain Layout

                         False if par_positivo(n - 1) else 
\backslash

\end_layout

\begin_layout Plain Layout

                         True
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Soluciones:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula 
\[
\left\{ \begin{array}{l}
\textbf{Pre}:\texttt{True}\\
\texttt{par(}n\texttt{: int) -> bool}\\
\textbf{Post}:\texttt{par(}n\texttt{)}=\begin{cases}
\texttt{True} & \textrm{si \emph{n} es par }\\
\texttt{False} & \textrm{en caso contrario}
\end{cases}
\end{array}\right.
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

par = lambda n: True if n == 0 else 
\backslash

\end_layout

\begin_layout Plain Layout

                     False if par(abs(n) - 1) else 
\backslash

\end_layout

\begin_layout Plain Layout

                     True
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset listings
lstparams "language=Python,fontfamily=tt,tabsize=4"
inline false
status open

\begin_layout Plain Layout

impar = lambda n: not par(n)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
